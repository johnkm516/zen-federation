version: '2'
name: zen

services:
  pgadmin:
    image: zen/pgadmin4:latest
    hostname: pgadmin
    container_name: pgadmin
    build:
      context: ./
      dockerfile: ./deploy/postgres/Dockerfile
      args:
        PGADMIN_EMAIL: ${PGADMIN_EMAIL}
    environment:
      PGADMIN_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}

    volumes:
      - pgadmin:/var/lib/pgadmin

    ports:
      - '${PGADMIN_PORT:-5050}:80'
    networks:
      - postgres-network
    restart: always
  elasticsearch:
    container_name: temporal-elasticsearch
    environment:
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - xpack.security.enabled=false
    image: elasticsearch:7.16.2
    networks:
      - temporal-network
    expose:
      - 9200
    volumes:
      - /var/lib/elasticsearch/data
  temporal-postgresql:
    container_name: temporal-postgresql
    environment:
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_USER: ${PGUSER}
    image: postgres:14
    networks:
      - temporal-network
    expose:
      - 5432
    volumes:
      - /var/lib/postgresql/data
  temporal:
    container_name: temporal
    depends_on:
      - temporal-postgresql
      - elasticsearch
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=${PGUSER}
      - POSTGRES_PWD=${PGPASSWORD}
      - POSTGRES_SEEDS=temporal-postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - ENABLE_ES=true
      - ES_SEEDS=elasticsearch
      - ES_VERSION=v7
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    networks:
      - temporal-network
    ports:
      - 7233:7233
    labels:
      kompose.volume.type: configMap
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:${TEMPORAL_VERSION}
    networks:
      - temporal-network
    stdin_open: true
    tty: true
  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    networks:
      - temporal-network
    ports:
      - 5051:8080

  postgres-auth-api:
    image: postgres:14
    container_name: postgres-auth-api
    restart: always
    environment:
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_USER: ${PGUSER}
      POSTGRES_DB: ${AUTH_PGDATABASE}
    volumes:
      - postgres-auth-api:/var/lib/postgresql/data
    ports:
      - ${AUTH_PGDATABASE_PORT}:5432
    networks:
      - postgres-network
  subgraph-auth-api:
    image: zen/subgraph-auth-api
    container_name: subgraph-auth-api
    build:
      context: ./
      dockerfile: ./deploy/api/Dockerfile
      args:
        API_NAME: Auth
        API_PORT: ${AUTH_API_PORT}
        PROJECT_NAME: auth-api
    environment:
      JWT_PRIVATE_KEY: ${JWT_PRIVATE_KEY}
      SMTP_SERVER: ${SMTP_SERVER}
      SMTP_LOGIN: ${SMTP_LOGIN}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM_NAME: ${SMTP_FROM_NAME}
      SMTP_FROM_EMAIL: ${SMTP_FROM_EMAIL}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      AUTH_SOURCE_URL: ${AUTH_SOURCE_URL}
      AUTH_API_PORT: ${AUTH_API_PORT}
    ports:
      - '${AUTH_API_PORT}:${AUTH_API_PORT}'
    networks:
      - postgres-network
    depends_on:
      - postgres-auth-api

volumes:
  postgres-auth-api:
  pgadmin:
networks:
  postgres-network:
    driver: bridge
    name: postgres-network
  temporal-network:
    driver: bridge
    name: temporal-network