generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/Auth-client"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  // DB URL is automatically replaced from localhost to docker image name in production
  url      = env("AUTH_SOURCE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  username      String?  @unique
  password      String?
  email         String   @unique
  roles         String[]
  googleId      String?  @unique
  googleProfile Json?
  lastName      String?
  firstName     String?
  profile       Profile?
  teams         UsersOnTeams[]
  calendars     CalendarsOnUsers[]
  contacted     User[]  @relation("UserContact")
  contactedBy   User[]  @relation("UserContact")
}

model Profile {
  userId            Int  @unique  @id
  user              User @relation(fields: [userId], references: [id])
  location          String?
  joiningDate       DateTime? @default(now())
  businessPhone     String?   @unique
  mobilePhone       String?   @unique
  kakaoTalkId       String?   @unique
  designation       String?
  profileImg        String?
  designationIcon   String?
  coverImg          String?
}

model UsersOnTeams {
  team          Team    @relation(fields: [teamName], references: [teamName])
  teamName      String
  user          User    @relation(fields: [userId], references: [id])
  userId        Int     
  assignedAt    DateTime @default(now())

  @@id([teamName, userId])
}

model Team {
  teamName      String  @unique @id
  users         UsersOnTeams[]
  teamType      String?
  teamIcon      String?
}

model CalendarEvent {
  id              Int      @id @default(autoincrement())
  url             String?  @default("")
  title           String   
  start           DateTime
  end             DateTime
  allDay          Boolean
  calendar        CalendarEventsOnCalendars[]
}

model CalendarEventsOnCalendars {
  calendar          Calendar        @relation(fields:[calendarId], references: [id])
  calendarId        Int         
  calendarEvent     CalendarEvent   @relation(fields:[calendarEventId], references: [id])
  calendarEventId   Int

  @@id([calendarId, calendarEventId])
}

model Calendar {
  id      Int     @id @default(autoincrement())
  calendarType    String
  users           CalendarsOnUsers[]
  calendarEvents  CalendarEventsOnCalendars[]
}

model CalendarsOnUsers {
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  calendar      Calendar @relation(fields: [calendarId], references: [id])
  calendarId    Int     

  @@id([userId, calendarId])
}

