generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/Auth-client"
  previewFeatures = ["extendedWhereUnique"]
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  // DB URL is automatically replaced from localhost to docker image name in production
  url      = env("AUTH_SOURCE_URL")
}

model User {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  username          String?  @unique
  password          String?
  email             String   @unique
  roles             String[]
  googleId          String?  @unique
  googleProfile     Json?
  lastName          String?
  firstName         String?
  profile           Profile?
  teams             UsersOnTeams[]
  calendars         CalendarsOnUsers[]
  eventsInvitedTo   UsersOnCalendarEvents[]
  contacted         User[]  @relation("UserContact")
  contactedBy       User[]  @relation("UserContact")
  calendarsCreated  Calendar[]
}

model Profile {
  userId            Int  @unique  @id
  user              User @relation(fields: [userId], references: [id])
  location          String?
  joiningDate       DateTime? @default(now())
  businessPhone     String?   @unique
  mobilePhone       String?   @unique
  kakaoTalkId       String?   @unique
  designation       String?
  profileImg        String?
  designationIcon   String?
  coverImg          String?
}

model UsersOnTeams {
  team          Team    @relation(fields: [teamName], references: [teamName])
  teamName      String
  user          User    @relation(fields: [userId], references: [id])
  userId        Int     
  assignedAt    DateTime @default(now())

  @@id([teamName, userId])
}

model Team {
  teamName      String  @unique @id
  users         UsersOnTeams[]
  teamType      String?
  teamIcon      String?
}

model UsersOnCalendarEvents {
  user              User        @relation(fields:[userId], references: [id])
  userId            Int         
  calendarEvent     CalendarEvent   @relation(fields:[calendarEventId], references: [id])
  calendarEventId   Int

  @@id([userId, calendarEventId])
}

model CalendarEvent {
  id              Int      @id @default(autoincrement())
  url             String?  @default("")
  title           String   
  start           DateTime
  end             DateTime
  allDay          Boolean
  guests          UsersOnCalendarEvents[]
  calendar        CalendarEventsOnCalendars[]
}

model CalendarEventsOnCalendars {
  calendar          Calendar        @relation(fields: [calendarType, calendarOwnerId], references: [calendarType, calendarOwnerId])
  calendarType      String      
  calendarOwnerId   Int   
  calendarEvent     CalendarEvent   @relation(fields:[calendarEventId], references: [id])
  calendarEventId   Int

  @@id([calendarType, calendarOwnerId, calendarEventId])
}

model Calendar {
  calendarType          String
  users                 CalendarsOnUsers[]
  calendarEvents        CalendarEventsOnCalendars[]
  calendarOwnerId       Int       
  calendarOwner         User      @relation(fields: [calendarOwnerId], references: [id])

  @@id([calendarOwnerId, calendarType])
} 

model CalendarsOnUsers {
  calendarAttributedTo      User     @relation(fields: [calendarAttributedToId], references: [id])
  calendarAttributedToId    Int
  calendar                  Calendar @relation(fields: [calendarType, calendarOwnerId], references: [calendarType, calendarOwnerId])
  calendarType              String
  calendarOwnerId           Int

  @@unique([calendarType, calendarAttributedToId])
  @@id([calendarAttributedToId, calendarType, calendarOwnerId])
}

