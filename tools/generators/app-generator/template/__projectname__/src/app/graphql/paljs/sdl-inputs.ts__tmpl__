import gql from 'graphql-tag';

export default gql`
  scalar DateTime

  type BatchPayload @shareable {
    count: Int!
  }
  enum SortOrder {
    asc
    desc
  }

  enum TransactionIsolationLevel {
    ReadUncommitted
    ReadCommitted
    RepeatableRead
    Serializable
  }

  enum UserScalarFieldEnum {
    id
  }

  input <%= name %>_UserWhereInput {
    AND: [<%= name %>_UserWhereInput!]
    OR: [<%= name %>_UserWhereInput!]
    NOT: [<%= name %>_UserWhereInput!]
    id: IntFilter
  }

  input <%= name %>_UserOrderByWithRelationInput {
    id: SortOrder
  }

  input <%= name %>_UserWhereUniqueInput {
    id: Int
    AND: [<%= name %>_UserWhereInput!]
    OR: [<%= name %>_UserWhereInput!]
    NOT: [<%= name %>_UserWhereInput!]
  }

  input <%= name %>_UserOrderByWithAggregationInput {
    id: SortOrder
    _count: <%= name %>_UserCountOrderByAggregateInput
    _avg: <%= name %>_UserAvgOrderByAggregateInput
    _max: <%= name %>_UserMaxOrderByAggregateInput
    _min: <%= name %>_UserMinOrderByAggregateInput
    _sum: <%= name %>_UserSumOrderByAggregateInput
  }

  input <%= name %>_UserScalarWhereWithAggregatesInput {
    AND: [<%= name %>_UserScalarWhereWithAggregatesInput!]
    OR: [<%= name %>_UserScalarWhereWithAggregatesInput!]
    NOT: [<%= name %>_UserScalarWhereWithAggregatesInput!]
    id: IntWithAggregatesFilter
  }

  input <%= name %>_UserCreateInput {
    id: Int!
  }

  input <%= name %>_UserUncheckedCreateInput {
    id: Int!
  }

  input <%= name %>_UserUpdateInput {
    id: Int
  }

  input <%= name %>_UserUncheckedUpdateInput {
    id: Int
  }

  input <%= name %>_UserCreateManyInput {
    id: Int!
  }

  input <%= name %>_UserUpdateManyMutationInput {
    id: Int
  }

  input <%= name %>_UserUncheckedUpdateManyInput {
    id: Int
  }

  input IntFilter {
    equals: Int
    in: [Int!]
    notIn: [Int!]
    lt: Int
    lte: Int
    gt: Int
    gte: Int
    not: NestedIntFilter
  }

  input <%= name %>_UserCountOrderByAggregateInput {
    id: SortOrder
  }

  input <%= name %>_UserAvgOrderByAggregateInput {
    id: SortOrder
  }

  input <%= name %>_UserMaxOrderByAggregateInput {
    id: SortOrder
  }

  input <%= name %>_UserMinOrderByAggregateInput {
    id: SortOrder
  }

  input <%= name %>_UserSumOrderByAggregateInput {
    id: SortOrder
  }

  input IntWithAggregatesFilter {
    equals: Int
    in: [Int!]
    notIn: [Int!]
    lt: Int
    lte: Int
    gt: Int
    gte: Int
    not: NestedIntWithAggregatesFilter
    _count: NestedIntFilter
    _avg: NestedFloatFilter
    _sum: NestedIntFilter
    _min: NestedIntFilter
    _max: NestedIntFilter
  }

  input IntFieldUpdateOperationsInput {
    set: Int
    increment: Int
    decrement: Int
    multiply: Int
    divide: Int
  }

  input NestedIntFilter {
    equals: Int
    in: [Int!]
    notIn: [Int!]
    lt: Int
    lte: Int
    gt: Int
    gte: Int
    not: NestedIntFilter
  }

  input NestedIntWithAggregatesFilter {
    equals: Int
    in: [Int!]
    notIn: [Int!]
    lt: Int
    lte: Int
    gt: Int
    gte: Int
    not: NestedIntWithAggregatesFilter
    _count: NestedIntFilter
    _avg: NestedFloatFilter
    _sum: NestedIntFilter
    _min: NestedIntFilter
    _max: NestedIntFilter
  }

  input NestedFloatFilter {
    equals: Float
    in: [Float!]
    notIn: [Float!]
    lt: Float
    lte: Float
    gt: Float
    gte: Float
    not: NestedFloatFilter
  }

  type AggregateUser @shareable {
    _count: UserCountAggregateOutputType
    _avg: UserAvgAggregateOutputType
    _sum: UserSumAggregateOutputType
    _min: UserMinAggregateOutputType
    _max: UserMaxAggregateOutputType
  }

  type UserGroupByOutputType @key(fields: "id") @shareable {
    id: Int!
    _count: UserCountAggregateOutputType
    _avg: UserAvgAggregateOutputType
    _sum: UserSumAggregateOutputType
    _min: UserMinAggregateOutputType
    _max: UserMaxAggregateOutputType
  }

  type UserCountAggregateOutputType @key(fields: "id") @shareable {
    id: Int!
    _all: Int!
  }

  type UserAvgAggregateOutputType @key(fields: "id") @shareable {
    id: Float
  }

  type UserSumAggregateOutputType @key(fields: "id") @shareable {
    id: Int
  }

  type UserMinAggregateOutputType @key(fields: "id") @shareable {
    id: Int
  }

  type UserMaxAggregateOutputType @key(fields: "id") @shareable {
    id: Int
  }

  type TransactionSucceeded @shareable {
    transactionSucceeded: Boolean!
  }

  input <%= name %>_createOneUserInput {
    data: <%= name %>_UserCreateInput
  }

  input <%= name %>_upsertOneUserInput {
    where: <%= name %>_UserWhereUniqueInput
    create: <%= name %>_UserCreateInput
    update: <%= name %>_UserUpdateInput
  }

  input <%= name %>_createManyUserInput {
    data: [<%= name %>_UserCreateManyInput]
    skipDuplicates: Boolean
  }

  input <%= name %>_deleteOneUserInput {
    where: <%= name %>_UserWhereUniqueInput
  }

  input <%= name %>_updateOneUserInput {
    data: <%= name %>_UserUpdateInput
    where: <%= name %>_UserWhereUniqueInput
  }

  input <%= name %>_updateManyUserInput {
    data: <%= name %>_UserUpdateManyMutationInput
    where: <%= name %>_UserWhereInput
  }

  input <%= name %>_deleteManyUserInput {
    where: <%= name %>_UserWhereInput
  }

  input <%= name %>_transactionalMutationInput {
    <%= name %>_createOneUser: <%= name %>_createOneUserInput
    <%= name %>_upsertOneUser: <%= name %>_upsertOneUserInput
    <%= name %>_createManyUser: <%= name %>_createManyUserInput
    <%= name %>_deleteOneUser: <%= name %>_deleteOneUserInput
    <%= name %>_updateOneUser: <%= name %>_updateOneUserInput
    <%= name %>_updateManyUser: <%= name %>_updateManyUserInput
    <%= name %>_deleteManyUser: <%= name %>_deleteManyUserInput
  }
`;
